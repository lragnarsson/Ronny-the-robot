/*
 * sensor_unit.h
 *
 * Created: 4/13/2015 12:09:10 PM
 *  Author: erisk214
 */ 


#ifndef SENSOR_UNIT_H_
#define SENSOR_UNIT_H_


#define F_CPU 20000000UL

/* Register defines */
#define TIMER0_B_NON_INV (1<<COM0B1) | (0<<COM0B0)
#define TIMER0_FAST_PWM_L (1<<WGM01) | (1<<WGM00)
#define TIMER0_FAST_PWM_H (0<<WGM02)
#define TIMER0_PRESCALE_1 (0<<CS02) | (0<<CS01) | (1<<CS00)
#define TIMER0_PRESCALE_1024 (1<<CS02) | (0<<CS01) | (1<<CS00)

#define TIMER1_CLEAR_ON_MATCH_H (0<<WGM13) | (1<<WGM12)
#define TIMER1_CLEAR_ON_MATCH_L (0<<WGM11) | (0<<WGM10)
#define TIMER1_PRESCALE_64 (0<<CS12) | (1<<CS11) | (1<<CS10)
#define TIMER1_MATCH_FREQUENCY_25HZ F_CPU / 25 / 64		// = 12500
#define TIMER1_INTERRUPT_ENABLE (1<<OCIE1A)

#define ADC_PRESCALE_128 (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)	// 20 MHz / 128 = 156.25 kHz

#define INTERRUPT_INT0_INT1 (1<<INT1) | (1<<INT0)
#define INTERRUPT_INT0_INT1_RISING_EDGE (1<<ISC01) | (1<<ISC00) | (1<<ISC11) | (1<<ISC10)

#define AC_INTERRUPT_RISING_EDGE (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0)

/* Port map */
#define ENC_L_B PINB0
#define ENC_R_B PINB1

#define REFL_REF PORTB4
#define REFL_ADC PINA5

/* Helpers */
#define ADC_NOT_COMPLETE !(ADCSRA & (1<<ADIF))

/* Values */
#define IR_SHORT_MIN 190
#define IR_SHORT_MAX 650
#define IR_LONG_MIN 140
#define IR_LONG_MAX 550
#define IR_NUM_SAMPLES 2

#define ENCODER_DISTANCE_SCALE 75
#define ENCODER_ROTATION_SCALE 165

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <util/atomic.h>
#include <avr/pgmspace.h>

volatile uint16_t ir_sensors[5][IR_NUM_SAMPLES];
volatile int8_t encoder_left = 0;
volatile int8_t encoder_right = 0;
volatile uint8_t tape_found = 0;

const uint8_t ir_short_lut[IR_SHORT_MAX - IR_SHORT_MIN + 1] PROGMEM = { 234, 232, 230, 229, 227, 225, 223, 222, 220, 218, 216, 215, 213, 211, 210, 208, 206, 205, 203, 201, 200, 198, 197, 195, 194, 192, 191, 189, 188, 186, 185, 183, 182, 180, 179, 178, 176, 175, 174, 172, 171, 170, 168, 167, 166, 164, 163, 162, 161, 159, 158, 157, 156, 155, 153, 152, 151, 150, 149, 148, 147, 146, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 125, 124, 123, 122, 121, 120, 119, 118, 118, 117, 116, 115, 114, 113, 113, 112, 111, 110, 110, 109, 108, 107, 107, 106, 105, 104, 104, 103, 102, 102, 101, 100, 99, 99, 98, 97, 97, 96, 96, 95, 94, 94, 93, 92, 92, 91, 91, 90, 89, 89, 88, 88, 87, 87, 86, 85, 85, 84, 84, 83, 83, 82, 82, 81, 81, 80, 80, 79, 79, 78, 78, 77, 77, 76, 76, 75, 75, 75, 74, 74, 73, 73, 72, 72, 71, 71, 71, 70, 70, 69, 69, 68, 68, 68, 67, 67, 66, 66, 66, 65, 65, 65, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 61, 60, 60, 59, 59, 59, 58, 58, 58, 57, 57, 57, 56, 56, 56, 55, 55, 55, 55, 54, 54, 54, 53, 53, 53, 52, 52, 52, 51, 51, 51, 51, 50, 50, 50, 49, 49, 49, 48, 48, 48, 48, 47, 47, 47, 46, 46, 46, 46, 45, 45, 45, 44, 44, 44, 44, 43, 43, 43, 43, 42, 42, 42, 41, 41, 41, 41, 40, 40, 40, 40, 39, 39, 39, 38, 38, 38, 38, 37, 37, 37, 37, 36, 36, 36, 36, 35, 35, 35, 35, 34, 34, 34, 33, 33, 33, 33, 32, 32, 32, 32, 31, 31, 31, 31, 30, 30, 30, 30, 29, 29, 29, 29, 28, 28, 28, 28, 27, 27, 27, 27, 26, 26, 26, 26, 25, 25, 25, 25, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17, 17, 16, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 10, 10, 10, 10, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
const uint8_t ir_short_lut_index_offset = IR_SHORT_MIN;
const uint8_t ir_short_lut_value_offset = 70;

const uint16_t ir_long_lut[IR_LONG_MAX - IR_LONG_MIN + 1] PROGMEM = { 891, 884, 877, 870, 863, 856, 849, 843, 836, 830, 823, 817, 811, 805, 799, 793, 787, 781, 775, 770, 764, 759, 753, 748, 743, 737, 732, 727, 722, 717, 712, 708, 703, 698, 694, 689, 685, 680, 676, 672, 668, 663, 659, 655, 651, 647, 643, 640, 636, 632, 628, 625, 621, 618, 614, 611, 607, 604, 601, 597, 594, 591, 588, 585, 582, 579, 576, 573, 570, 567, 564, 562, 559, 556, 553, 551, 548, 546, 543, 540, 538, 536, 533, 531, 528, 526, 524, 521, 519, 517, 515, 512, 510, 508, 506, 504, 502, 500, 498, 496, 494, 492, 490, 488, 486, 484, 482, 480, 479, 477, 475, 473, 471, 470, 468, 466, 465, 463, 461, 460, 458, 456, 455, 453, 451, 450, 448, 447, 445, 444, 442, 441, 439, 438, 436, 435, 433, 432, 430, 429, 427, 426, 425, 423, 422, 420, 419, 418, 416, 415, 414, 412, 411, 410, 408, 407, 406, 404, 403, 402, 401, 399, 398, 397, 396, 394, 393, 392, 391, 389, 388, 387, 386, 384, 383, 382, 381, 380, 378, 377, 376, 375, 374, 373, 371, 370, 369, 368, 367, 366, 365, 363, 362, 361, 360, 359, 358, 357, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 290, 289, 288, 287, 286, 285, 284, 284, 283, 282, 281, 280, 279, 279, 278, 277, 276, 275, 274, 274, 273, 272, 271, 270, 270, 269, 268, 267, 266, 266, 265, 264, 263, 263, 262, 261, 260, 260, 259, 258, 257, 257, 256, 255, 254, 254, 253, 252, 251, 251, 250, 249, 249, 248, 247, 246, 246, 245, 244, 243, 243, 242, 241, 240, 240, 239, 238, 238, 237, 236, 235, 235, 234, 233, 232, 232, 231, 230, 229, 228, 228, 227, 226, 225, 225, 224, 223, 222, 221, 220, 220, 219, 218, 217, 216, 215, 214, 213, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 198, 197, 196, 195, 194, 193, 191, 190, 189, 188, 186, 185, 184, 182, 181, 180, 178, 177, 175, 174, 172, 171, 169, 168, 166, 164, 163, 161, 159, 157, 156, 154, 152, 150, 148 };
const uint16_t ir_long_lut_index_offset = IR_LONG_MIN;

uint8_t calibrate_reflectance_sensor();
void handle_recieved_message();
uint8_t send_distance_readings();
uint8_t send_odometry_readings();
void init_ir();
void init_reflectance();
void init_wheel_encoder();


#endif /* SENSOR_UNIT_H_ */